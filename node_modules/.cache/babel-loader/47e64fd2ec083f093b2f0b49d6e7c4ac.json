{"ast":null,"code":"const FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SETUSERS = 'SETUSERS';\nconst SETPAGE = 'SETPAGE';\nconst TOGLE = 'TOGLE';\nlet initstate = {\n  users: [],\n  TotalCount: 50,\n  PageSize: 10,\n  currentPage: 1,\n  isfetching: true\n};\n\nconst reducerUsers = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initstate;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userid) {\n            return { ...u,\n              followed: true\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userid) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SETUSERS:\n      return { ...state,\n        users: [...action.users]\n      };\n\n    case SETPAGE:\n      return { ...state,\n        currentPage: action.page\n      };\n\n    case TOGLE:\n      return { ...state,\n        isfetching: action.fetching\n      };\n\n    default:\n      return state;\n  }\n};\n\nconsole.log('casca');\nexport const OnFollow = userid => ({\n  type: FOLLOW,\n  userid\n});\n_c = OnFollow;\nexport const UnFollow = userid => ({\n  type: UNFOLLOW,\n  userid\n});\n_c2 = UnFollow;\nexport const SetUsers = users => ({\n  type: SETUSERS,\n  users\n});\n_c3 = SetUsers;\nexport const SetPage = page => ({\n  type: SETPAGE,\n  page\n});\n_c4 = SetPage;\nexport const Togle = fetching => ({\n  type: TOGLE,\n  fetching\n});\n_c5 = Togle;\nexport default reducerUsers;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"OnFollow\");\n$RefreshReg$(_c2, \"UnFollow\");\n$RefreshReg$(_c3, \"SetUsers\");\n$RefreshReg$(_c4, \"SetPage\");\n$RefreshReg$(_c5, \"Togle\");","map":{"version":3,"sources":["C:/React/Project/react2.0/src/Readux/Reducer-Users.js"],"names":["FOLLOW","UNFOLLOW","SETUSERS","SETPAGE","TOGLE","initstate","users","TotalCount","PageSize","currentPage","isfetching","reducerUsers","state","action","type","map","u","id","userid","followed","page","fetching","console","log","OnFollow","UnFollow","SetUsers","SetPage","Togle"],"mappings":"AAAA,MAAMA,MAAM,GAAG,QAAf;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,KAAK,GAAG,OAAd;AAEA,IAAIC,SAAS,GAAG;AACZC,EAAAA,KAAK,EAAE,EADK;AAEZC,EAAAA,UAAU,EAAE,EAFA;AAGZC,EAAAA,QAAQ,EAAE,EAHE;AAIZC,EAAAA,WAAW,EAAE,CAJD;AAKZC,EAAAA,UAAU,EAAE;AALA,CAAhB;;AAQA,MAAMC,YAAY,GAAG,YAA+B;AAAA,MAA9BC,KAA8B,uEAAtBP,SAAsB;AAAA,MAAXQ,MAAW;;AAEhD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKd,MAAL;AACI,aAAO,EACH,GAAGY,KADA;AAEHN,QAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYS,GAAZ,CAAgBC,CAAC,IAAI;AACxB,cAAIA,CAAC,CAACC,EAAF,KAASJ,MAAM,CAACK,MAApB,EAA4B;AACxB,mBAAO,EAAC,GAAGF,CAAJ;AAAOG,cAAAA,QAAQ,EAAE;AAAjB,aAAP;AACH;;AACD,iBAAOH,CAAP;AACH,SALM;AAFJ,OAAP;;AASJ,SAAKf,QAAL;AACI,aAAO,EACH,GAAGW,KADA;AAEHN,QAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYS,GAAZ,CAAgBC,CAAC,IAAI;AACxB,cAAIA,CAAC,CAACC,EAAF,KAASJ,MAAM,CAACK,MAApB,EAA4B;AAExB,mBAAO,EAAC,GAAGF,CAAJ;AAAOG,cAAAA,QAAQ,EAAE;AAAjB,aAAP;AAEH;;AACD,iBAAOH,CAAP;AAEH,SARM;AAFJ,OAAP;;AAaJ,SAAKd,QAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHN,QAAAA,KAAK,EAAE,CAAC,GAAGO,MAAM,CAACP,KAAX;AAFJ,OAAP;;AAIJ,SAAKH,OAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHH,QAAAA,WAAW,EAAEI,MAAM,CAACO;AAFjB,OAAP;;AAIJ,SAAKhB,KAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHF,QAAAA,UAAU,EAAEG,MAAM,CAACQ;AAFhB,OAAP;;AAIJ;AACI,aAAOT,KAAP;AAzCR;AA6CH,CA/CD;;AAgDAU,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,OAAO,MAAMC,QAAQ,GAAIN,MAAD,KAAa;AAACJ,EAAAA,IAAI,EAAEd,MAAP;AAAekB,EAAAA;AAAf,CAAb,CAAjB;KAAMM,Q;AACb,OAAO,MAAMC,QAAQ,GAAIP,MAAD,KAAa;AAACJ,EAAAA,IAAI,EAAEb,QAAP;AAAiBiB,EAAAA;AAAjB,CAAb,CAAjB;MAAMO,Q;AACb,OAAO,MAAMC,QAAQ,GAAIpB,KAAD,KAAY;AAACQ,EAAAA,IAAI,EAAEZ,QAAP;AAAiBI,EAAAA;AAAjB,CAAZ,CAAjB;MAAMoB,Q;AACb,OAAO,MAAMC,OAAO,GAAIP,IAAD,KAAW;AAACN,EAAAA,IAAI,EAAEX,OAAP;AAAgBiB,EAAAA;AAAhB,CAAX,CAAhB;MAAMO,O;AACb,OAAO,MAAMC,KAAK,GAAIP,QAAD,KAAe;AAACP,EAAAA,IAAI,EAAEV,KAAP;AAAciB,EAAAA;AAAd,CAAf,CAAd;MAAMO,K;AACb,eAAejB,YAAf","sourcesContent":["const FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SETUSERS = 'SETUSERS'\r\nconst SETPAGE = 'SETPAGE'\r\nconst TOGLE = 'TOGLE'\r\n\r\nlet initstate = {\r\n    users: [],\r\n    TotalCount: 50,\r\n    PageSize: 10,\r\n    currentPage: 1,\r\n    isfetching: true\r\n}\r\n\r\nconst reducerUsers = (state = initstate, action) => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW :\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userid) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW :\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userid) {\r\n\r\n                        return {...u, followed: false}\r\n\r\n                    }\r\n                    return u\r\n\r\n                })\r\n\r\n            }\r\n        case SETUSERS:\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        case SETPAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.page\r\n            }\r\n        case TOGLE:\r\n            return {\r\n                ...state,\r\n                isfetching: action.fetching\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n\r\n}\r\nconsole.log('casca')\r\nexport const OnFollow = (userid) => ({type: FOLLOW, userid})\r\nexport const UnFollow = (userid) => ({type: UNFOLLOW, userid})\r\nexport const SetUsers = (users) => ({type: SETUSERS, users})\r\nexport const SetPage = (page) => ({type: SETPAGE, page})\r\nexport const Togle = (fetching) => ({type: TOGLE, fetching})\r\nexport default reducerUsers"]},"metadata":{},"sourceType":"module"}