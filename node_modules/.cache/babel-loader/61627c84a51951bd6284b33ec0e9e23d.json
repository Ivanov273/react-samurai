{"ast":null,"code":"import { usersAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SETAUTH = 'SETAUTH';\nlet initstate = {\n  userid: '',\n  login: '',\n  email: '',\n  isAuth: 'false'\n};\n\nconst reducerAuth = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initstate;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SETAUTH:\n      return { ...state,\n        ...action.data\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const SetAuth = (userid, login, email, isAuth) => ({\n  type: SETAUTH,\n  data: {\n    userid,\n    login,\n    email,\n    isAuth\n  }\n});\n_c = SetAuth;\nexport const AuthThunk = () => async dispatch => {\n  let response = await usersAPI.apiAuth();\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      login,\n      email\n    } = response.data.data;\n    dispatch(SetAuth(id, login, email, true));\n  }\n};\nexport const AuthThunkLogin = (email, password, rememberMe) => async dispatch => {\n  let response = await usersAPI.apiLogin(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(AuthThunk());\n  } else {\n    dispatch(stopSubmit('loginform', {\n      _error: response.data.messages[0]\n    }));\n  }\n};\nexport const AuthThunkDeleteLogin = dispatch => {\n  return dispatch => {\n    usersAPI.apiDeleteLogin().then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(SetAuth(null, null, null, false));\n      }\n    });\n  };\n};\n_c2 = AuthThunkDeleteLogin;\nexport default reducerAuth;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SetAuth\");\n$RefreshReg$(_c2, \"AuthThunkDeleteLogin\");","map":{"version":3,"sources":["C:/React/Project/react2.0/src/Redux/Reducer-Auth.js"],"names":["usersAPI","stopSubmit","SETAUTH","initstate","userid","login","email","isAuth","reducerAuth","state","action","type","data","SetAuth","AuthThunk","dispatch","response","apiAuth","resultCode","id","AuthThunkLogin","password","rememberMe","apiLogin","_error","messages","AuthThunkDeleteLogin","apiDeleteLogin","then"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,YAAvB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,MAAMC,OAAO,GAAG,SAAhB;AAEA,IAAIC,SAAS,GAAG;AACZC,EAAAA,MAAM,EAAE,EADI;AAEZC,EAAAA,KAAK,EAAE,EAFK;AAGZC,EAAAA,KAAK,EAAE,EAHK;AAIZC,EAAAA,MAAM,EAAE;AAJI,CAAhB;;AAMA,MAAMC,WAAW,GAAG,YAA+B;AAAA,MAA9BC,KAA8B,uEAAtBN,SAAsB;AAAA,MAAXO,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,OAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAKJ;AACI,aAAOH,KAAP;AARR;AAUH,CAXD;;AAYA,OAAO,MAAMI,OAAO,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,MAAmC;AAACI,EAAAA,IAAI,EAAET,OAAP;AAAgBU,EAAAA,IAAI,EAAE;AAACR,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB;AAAtB,CAAnC,CAAhB;KAAMM,O;AACb,OAAO,MAAMC,SAAS,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAE/C,MAAIC,QAAQ,GAAG,MAAMhB,QAAQ,CAACiB,OAAT,EAArB;;AAEA,MAAID,QAAQ,CAACJ,IAAT,CAAcM,UAAd,KAA6B,CAAjC,EAAoC;AAChC,QAAI;AAACC,MAAAA,EAAD;AAAKd,MAAAA,KAAL;AAAYC,MAAAA;AAAZ,QAAqBU,QAAQ,CAACJ,IAAT,CAAcA,IAAvC;AACAG,IAAAA,QAAQ,CAACF,OAAO,CAACM,EAAD,EAAKd,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAR,CAAR;AACH;AAEJ,CATM;AAUP,OAAO,MAAMc,cAAc,GAAG,CAACd,KAAD,EAAQe,QAAR,EAAkBC,UAAlB,KAAiC,MAAOP,QAAP,IAAoB;AAC/E,MAAIC,QAAQ,GAAG,MAAMhB,QAAQ,CAACuB,QAAT,CAAkBjB,KAAlB,EAAyBe,QAAzB,EAAmCC,UAAnC,CAArB;;AACI,MAAIN,QAAQ,CAACJ,IAAT,CAAcM,UAAd,KAA6B,CAAjC,EAAoC;AAChCH,IAAAA,QAAQ,CAACD,SAAS,EAAV,CAAR;AACH,GAFD,MAEO;AACHC,IAAAA,QAAQ,CAACd,UAAU,CAAC,WAAD,EAAc;AAACuB,MAAAA,MAAM,EAAER,QAAQ,CAACJ,IAAT,CAAca,QAAd,CAAuB,CAAvB;AAAT,KAAd,CAAX,CAAR;AAEH;AACR,CARM;AASP,OAAO,MAAMC,oBAAoB,GAAIX,QAAD,IAAc;AAE9C,SAAQA,QAAD,IAAc;AACjBf,IAAAA,QAAQ,CAAC2B,cAAT,GAA0BC,IAA1B,CAA+BZ,QAAQ,IAAI;AAEvC,UAAIA,QAAQ,CAACJ,IAAT,CAAcM,UAAd,KAA6B,CAAjC,EAAoC;AAChCH,QAAAA,QAAQ,CAACF,OAAO,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAR,CAAR;AACH;AACJ,KALD;AAMH,GAPD;AAQH,CAVM;MAAMa,oB;AAYb,eAAelB,WAAf","sourcesContent":["import {usersAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SETAUTH = 'SETAUTH'\r\n\r\nlet initstate = {\r\n    userid: '',\r\n    login: '',\r\n    email: '',\r\n    isAuth: 'false'\r\n}\r\nconst reducerAuth = (state = initstate, action) => {\r\n    switch (action.type) {\r\n        case SETAUTH:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const SetAuth = (userid, login, email, isAuth) => ({type: SETAUTH, data: {userid, login, email, isAuth}})\r\nexport const AuthThunk = () => async (dispatch) => {\r\n\r\n    let response = await usersAPI.apiAuth()\r\n\r\n    if (response.data.resultCode === 0) {\r\n        let {id, login, email} = response.data.data\r\n        dispatch(SetAuth(id, login, email, true))\r\n    }\r\n\r\n}\r\nexport const AuthThunkLogin = (email, password, rememberMe) => async (dispatch) => {\r\n    let response = await usersAPI.apiLogin(email, password, rememberMe)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(AuthThunk())\r\n        } else {\r\n            dispatch(stopSubmit('loginform', {_error: response.data.messages[0]}))\r\n\r\n        }\r\n}\r\nexport const AuthThunkDeleteLogin = (dispatch) => {\r\n\r\n    return (dispatch) => {\r\n        usersAPI.apiDeleteLogin().then(response => {\r\n\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(SetAuth(null, null, null, false))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default reducerAuth"]},"metadata":{},"sourceType":"module"}