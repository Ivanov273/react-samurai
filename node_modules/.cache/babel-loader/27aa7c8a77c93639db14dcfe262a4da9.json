{"ast":null,"code":"import { usersAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SETAUTH = 'SETAUTH';\nlet initstate = {\n  userid: '',\n  login: '',\n  email: '',\n  isAuth: 'false'\n};\n\nconst reducerAuth = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initstate;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SETAUTH:\n      return { ...state,\n        ...action.data\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const SetAuth = (userid, login, email, isAuth) => ({\n  type: SETAUTH,\n  data: {\n    userid,\n    login,\n    email,\n    isAuth\n  }\n});\n_c = SetAuth;\nexport const AuthThunk = () => dispatch => {\n  return usersAPI.apiAuth().then(response => {\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        login,\n        email\n      } = response.data.data;\n      dispatch(SetAuth(id, login, email, true));\n    }\n  });\n};\nexport const AuthThunkLogin = (email, password, rememberMe) => dispatch => {\n  usersAPI.apiLogin(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(AuthThunk());\n    } else {\n      dispatch(stopSubmit('loginform', {\n        _error: response.data.messages[0]\n      }));\n    }\n  });\n};\nexport const AuthThunkDeleteLogin = dispatch => {\n  return dispatch => {\n    usersAPI.apiDeleteLogin().then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(SetAuth(null, null, null, false));\n      }\n    });\n  };\n};\n_c2 = AuthThunkDeleteLogin;\nexport default reducerAuth;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SetAuth\");\n$RefreshReg$(_c2, \"AuthThunkDeleteLogin\");","map":{"version":3,"sources":["C:/React/Project/react2.0/src/Readux/Reducer-Auth.js"],"names":["usersAPI","stopSubmit","SETAUTH","initstate","userid","login","email","isAuth","reducerAuth","state","action","type","data","SetAuth","AuthThunk","dispatch","apiAuth","then","response","resultCode","id","AuthThunkLogin","password","rememberMe","apiLogin","_error","messages","AuthThunkDeleteLogin","apiDeleteLogin"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,YAAvB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,MAAMC,OAAO,GAAG,SAAhB;AAEA,IAAIC,SAAS,GAAG;AACZC,EAAAA,MAAM,EAAE,EADI;AAEZC,EAAAA,KAAK,EAAE,EAFK;AAGZC,EAAAA,KAAK,EAAE,EAHK;AAIZC,EAAAA,MAAM,EAAE;AAJI,CAAhB;;AAMA,MAAMC,WAAW,GAAG,YAA+B;AAAA,MAA9BC,KAA8B,uEAAtBN,SAAsB;AAAA,MAAXO,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,OAAL;AACG,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAKH;AACI,aAAOH,KAAP;AARR;AAUH,CAXD;;AAYA,OAAO,MAAMI,OAAO,GAAG,CAAET,MAAF,EAASC,KAAT,EAAeC,KAAf,EAAqBC,MAArB,MAAiC;AAACI,EAAAA,IAAI,EAAET,OAAP;AAAeU,EAAAA,IAAI,EAAC;AAAER,IAAAA,MAAF;AAASC,IAAAA,KAAT;AAAeC,IAAAA,KAAf;AAAqBC,IAAAA;AAArB;AAApB,CAAjC,CAAhB;KAAMM,O;AACb,OAAO,MAAMC,SAAS,GAAE,MAAKC,QAAD,IAAa;AAEnC,SAAQf,QAAQ,CAACgB,OAAT,GAAmBC,IAAnB,CAAwBC,QAAQ,IAAI;AACtC,QAAIA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA6B,CAAjC,EAAoC;AAChC,UAAI;AAACC,QAAAA,EAAD;AAAIf,QAAAA,KAAJ;AAAUC,QAAAA;AAAV,UAAmBY,QAAQ,CAACN,IAAT,CAAcA,IAArC;AACAG,MAAAA,QAAQ,CAACF,OAAO,CAACO,EAAD,EAAIf,KAAJ,EAAUC,KAAV,EAAgB,IAAhB,CAAR,CAAR;AACJ;AACP,GALS,CAAR;AAML,CARM;AASP,OAAO,MAAMe,cAAc,GAAG,CAACf,KAAD,EAAOgB,QAAP,EAAgBC,UAAhB,KAA8BR,QAAD,IAAa;AAChEf,EAAAA,QAAQ,CAACwB,QAAT,CAAkBlB,KAAlB,EAAwBgB,QAAxB,EAAiCC,UAAjC,EAA6CN,IAA7C,CAAkDC,QAAQ,IAAI;AAC1D,QAAIA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,MAAAA,QAAQ,CAACD,SAAS,EAAV,CAAR;AACJ,KAFA,MAGI;AACAC,MAAAA,QAAQ,CAACd,UAAU,CAAC,WAAD,EAAa;AAACwB,QAAAA,MAAM,EAAEP,QAAQ,CAACN,IAAT,CAAcc,QAAd,CAAuB,CAAvB;AAAT,OAAb,CAAX,CAAR;AAEH;AACR,GARG;AASP,CAVM;AAWP,OAAO,MAAMC,oBAAoB,GAAIZ,QAAD,IAAa;AAE7C,SAAQA,QAAD,IAAa;AAChBf,IAAAA,QAAQ,CAAC4B,cAAT,GAA0BX,IAA1B,CAA+BC,QAAQ,IAAI;AAEvC,UAAIA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,QAAAA,QAAQ,CAACF,OAAO,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,KAAhB,CAAR,CAAR;AACJ;AACP,KALG;AAMP,GAPG;AAQH,CAVM;MAAMc,oB;AAYb,eAAenB,WAAf","sourcesContent":["import {usersAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SETAUTH = 'SETAUTH'\r\n\r\nlet initstate = {\r\n    userid: '',\r\n    login: '',\r\n    email: '',\r\n    isAuth: 'false'\r\n}\r\nconst reducerAuth = (state = initstate, action) => {\r\n    switch (action.type) {\r\n        case SETAUTH:\r\n           return {\r\n               ...state,\r\n               ...action.data\r\n\r\n           }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const SetAuth = ( userid,login,email,isAuth) => ({type: SETAUTH,data:{ userid,login,email,isAuth }})\r\nexport const AuthThunk =()=>(dispatch)=> {\r\n\r\n      return  usersAPI.apiAuth().then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                let {id,login,email} = response.data.data\r\n                dispatch(SetAuth(id,login,email,true))\r\n           }\r\n    })\r\n}\r\nexport const AuthThunkLogin = (email,password,rememberMe)=>(dispatch)=> {\r\n        usersAPI.apiLogin(email,password,rememberMe).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(AuthThunk())\r\n           }\r\n            else{\r\n                dispatch(stopSubmit('loginform',{_error: response.data.messages[0]}))\r\n\r\n            }\r\n    })\r\n}\r\nexport const AuthThunkDeleteLogin = (dispatch)=> {\r\n\r\n    return (dispatch)=> {\r\n        usersAPI.apiDeleteLogin().then(response => {\r\n\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(SetAuth(null,null,null,false))\r\n           }\r\n    })\r\n}\r\n}\r\n\r\nexport default reducerAuth"]},"metadata":{},"sourceType":"module"}