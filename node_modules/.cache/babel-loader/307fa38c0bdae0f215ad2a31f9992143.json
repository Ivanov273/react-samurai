{"ast":null,"code":"import { Login, usersAPI } from \"../api/api\";\nconst SETAUTH = 'SETAUTH';\nlet initstate = {\n  userid: '',\n  login: '',\n  email: ''\n};\n\nconst reducerAuth = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initstate;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SETAUTH:\n      return { ...state,\n        ...action.data\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const SetAuth = (id, login, email, isAuth) => ({\n  type: SETAUTH,\n  data: {\n    id,\n    login,\n    email,\n    isAuth\n  }\n});\n_c = SetAuth;\nexport const AuthThunk = dispatch => {\n  return dispatch => {\n    usersAPI.apiAuth().then(response => {\n      if (response.data.resultCode === 0) {\n        let {\n          id,\n          login,\n          email\n        } = response.data.data;\n        dispatch(SetAuth(id, login, email, true));\n      }\n    });\n  };\n};\n_c2 = AuthThunk;\nexport const LoginThunk = (email, password, rememberme) => {\n  return dispatch => {\n    Login.login(email, password, rememberme).then(response => {\n      if (response.data.resultCode === 0) {\n        console.log('++++'); //let {id,login,email} = response.data.data\n\n        dispatch(AuthThunk());\n      }\n    });\n  };\n};\n_c3 = LoginThunk;\nexport default reducerAuth;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SetAuth\");\n$RefreshReg$(_c2, \"AuthThunk\");\n$RefreshReg$(_c3, \"LoginThunk\");","map":{"version":3,"sources":["C:/React/Project/react2.0/src/Readux/Reducer-Auth.js"],"names":["Login","usersAPI","SETAUTH","initstate","userid","login","email","reducerAuth","state","action","type","data","SetAuth","id","isAuth","AuthThunk","dispatch","apiAuth","then","response","resultCode","LoginThunk","password","rememberme","console","log"],"mappings":"AAAA,SAAQA,KAAR,EAAeC,QAAf,QAA8B,YAA9B;AAEA,MAAMC,OAAO,GAAG,SAAhB;AAEA,IAAIC,SAAS,GAAG;AACZC,EAAAA,MAAM,EAAE,EADI;AAEZC,EAAAA,KAAK,EAAE,EAFK;AAGZC,EAAAA,KAAK,EAAE;AAHK,CAAhB;;AAMA,MAAMC,WAAW,GAAG,YAA+B;AAAA,MAA9BC,KAA8B,uEAAtBL,SAAsB;AAAA,MAAXM,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,OAAL;AACG,aAAO,EACH,GAAGM,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAIH;AACI,aAAOH,KAAP;AAPR;AASH,CAVD;;AAWA,OAAO,MAAMI,OAAO,GAAG,CAACC,EAAD,EAAIR,KAAJ,EAAUC,KAAV,EAAgBQ,MAAhB,MAA4B;AAACJ,EAAAA,IAAI,EAAER,OAAP;AAAeS,EAAAA,IAAI,EAAC;AAACE,IAAAA,EAAD;AAAIR,IAAAA,KAAJ;AAAUC,IAAAA,KAAV;AAAgBQ,IAAAA;AAAhB;AAApB,CAA5B,CAAhB;KAAMF,O;AACb,OAAO,MAAMG,SAAS,GAAIC,QAAD,IAAa;AAClC,SAAQA,QAAD,IAAa;AAChBf,IAAAA,QAAQ,CAACgB,OAAT,GAAmBC,IAAnB,CAAwBC,QAAQ,IAAI;AAChC,UAAIA,QAAQ,CAACR,IAAT,CAAcS,UAAd,KAA6B,CAAjC,EAAoC;AAChC,YAAI;AAACP,UAAAA,EAAD;AAAIR,UAAAA,KAAJ;AAAUC,UAAAA;AAAV,YAAmBa,QAAQ,CAACR,IAAT,CAAcA,IAArC;AACAK,QAAAA,QAAQ,CAACJ,OAAO,CAACC,EAAD,EAAIR,KAAJ,EAAUC,KAAV,EAAgB,IAAhB,CAAR,CAAR;AACJ;AACP,KALG;AAMP,GAPG;AAQH,CATM;MAAMS,S;AAUb,OAAO,MAAMM,UAAU,GAAG,CAACf,KAAD,EAAOgB,QAAP,EAAgBC,UAAhB,KAA8B;AACpD,SAAQP,QAAD,IAAa;AAChBhB,IAAAA,KAAK,CAACK,KAAN,CAAYC,KAAZ,EAAkBgB,QAAlB,EAA2BC,UAA3B,EAAuCL,IAAvC,CAA4CC,QAAQ,IAAI;AACpD,UAAIA,QAAQ,CAACR,IAAT,CAAcS,UAAd,KAA6B,CAAjC,EAAoC;AAChCI,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EADgC,CAEhC;;AACAT,QAAAA,QAAQ,CAACD,SAAS,EAAV,CAAR;AACH;AACJ,KAND;AAOH,GARD;AASH,CAVM;MAAMM,U;AAYb,eAAed,WAAf","sourcesContent":["import {Login, usersAPI} from \"../api/api\";\r\n\r\nconst SETAUTH = 'SETAUTH'\r\n\r\nlet initstate = {\r\n    userid: '',\r\n    login: '',\r\n    email: ''\r\n\r\n}\r\nconst reducerAuth = (state = initstate, action) => {\r\n    switch (action.type) {\r\n        case SETAUTH:\r\n           return {\r\n               ...state,\r\n               ...action.data,\r\n           }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const SetAuth = (id,login,email,isAuth) => ({type: SETAUTH,data:{id,login,email,isAuth}})\r\nexport const AuthThunk = (dispatch)=> {\r\n    return (dispatch)=> {\r\n        usersAPI.apiAuth().then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                let {id,login,email} = response.data.data\r\n                dispatch(SetAuth(id,login,email,true))\r\n           }\r\n    })\r\n}\r\n}\r\nexport const LoginThunk = (email,password,rememberme)=> {\r\n    return (dispatch)=> {\r\n        Login.login(email,password,rememberme).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                console.log('++++')\r\n                //let {id,login,email} = response.data.data\r\n                dispatch(AuthThunk())\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default reducerAuth"]},"metadata":{},"sourceType":"module"}