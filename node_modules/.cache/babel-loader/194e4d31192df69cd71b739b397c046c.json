{"ast":null,"code":"import { LoginAPI, usersAPI as loginAPI, usersAPI } from \"../api/api\";\nconst SETAUTH = 'SETAUTH';\nconst DELETE_SETAUTH = 'DELETE_SETAUTH';\nconst SET_ERROR = 'SET_ERROR';\nlet initstate = {\n  userid: '',\n  login: '',\n  email: '',\n  isAuth: false,\n  errors: ''\n};\n\nconst reducerAuth = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initstate;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SETAUTH:\n      return { ...state,\n        ...action.payload\n      };\n\n    case SET_ERROR:\n      return { ...state,\n        errors: action.error\n      };\n\n    case DELETE_SETAUTH:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const SetAuth = (id, login, email, isAuth) => ({\n  type: SETAUTH,\n  payload: {\n    id,\n    login,\n    email,\n    isAuth\n  }\n});\n_c = SetAuth;\n\nconst adderrors = error => ({\n  type: SET_ERROR,\n  error: error\n});\n\nexport const AuthThunk = dispatch => async dispatch => {\n  let response = await usersAPI.apiAuth();\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      login,\n      email\n    } = response.data.data;\n    dispatch(SetAuth(id, login, email, true));\n  }\n};\nexport const LoginThunk = (email, password, rememberMe) => async dispatch => {\n  let response = await LoginAPI.authorize(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(AuthThunk());\n  } else {\n    console.log(response.data.message[0]);\n  }\n};\nexport const deleteLogin = () => async dispatch => {\n  let response = await LoginAPI.deleteauthorize();\n\n  if (response.data.resultCode === 0) {\n    dispatch(SetAuth(null, null, null, false));\n  }\n};\nexport default reducerAuth;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetAuth\");","map":{"version":3,"sources":["C:/React/Project/react2.0/src/Readux/Reducer-Auth.js"],"names":["LoginAPI","usersAPI","loginAPI","SETAUTH","DELETE_SETAUTH","SET_ERROR","initstate","userid","login","email","isAuth","errors","reducerAuth","state","action","type","payload","error","SetAuth","id","adderrors","AuthThunk","dispatch","response","apiAuth","data","resultCode","LoginThunk","password","rememberMe","authorize","console","log","message","deleteLogin","deleteauthorize"],"mappings":"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","sourcesContent":["import {LoginAPI, usersAPI as loginAPI, usersAPI} from \"../api/api\";\r\n\r\nconst SETAUTH = 'SETAUTH'\r\nconst DELETE_SETAUTH = 'DELETE_SETAUTH'\r\nconst SET_ERROR = 'SET_ERROR'\r\n\r\nlet initstate = {\r\n    userid: '',\r\n    login: '',\r\n    email: '',\r\n    isAuth: false,\r\n    errors: ''\r\n}\r\nconst reducerAuth = (state = initstate, action) => {\r\n    switch (action.type) {\r\n        case SETAUTH:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        case SET_ERROR:\r\n            return{\r\n                ...state,\r\n                errors: action.error\r\n            }\r\n        case DELETE_SETAUTH:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const SetAuth = (id, login, email, isAuth) => ({type: SETAUTH, payload: {id, login, email, isAuth}})\r\nconst adderrors = (error)=>({type: SET_ERROR,error:error})\r\nexport const AuthThunk = (dispatch) => async (dispatch) => {\r\n    let response = await usersAPI.apiAuth()\r\n    if (response.data.resultCode === 0) {\r\n        let {id, login, email} = response.data.data\r\n        dispatch(SetAuth(id, login, email, true))\r\n    }\r\n\r\n}\r\nexport const LoginThunk = (email, password, rememberMe) => async (dispatch) => {\r\n    let response = await LoginAPI.authorize(email, password, rememberMe)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(AuthThunk())\r\n    }else {console.log(response.data.message[0])}\r\n}\r\nexport const deleteLogin = () => async (dispatch) => {\r\n    let response = await LoginAPI.deleteauthorize()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(SetAuth(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport default reducerAuth"]},"metadata":{},"sourceType":"module"}