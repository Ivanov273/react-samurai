{"ast":null,"code":"import { AuthThunk } from \"./Reducer-Auth\";\nconst SET_INITIALIZEd = 'it-kamasutra/SET_INITIALIZE';\nlet initstate = {\n  initialize: false\n};\n\nconst reducerApp = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initstate;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_INITIALIZE:\n      return { ...state,\n        initialize: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const SetInitialize = () => ({\n  type: SET_INITIALIZE\n});\n_c = SetInitialize;\nexport const InitializeThunk = () => dispatch => {\n  let promice = dispatch(AuthThunk());\n  Promise.all([promice]).then(() => {\n    dispatch(SetInitialize());\n  });\n};\nexport default reducerApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetInitialize\");","map":{"version":3,"sources":["C:/React/Project/react2.0/src/Readux/Reducer-App.js"],"names":["AuthThunk","SET_INITIALIZEd","initstate","initialize","reducerApp","state","action","type","SET_INITIALIZE","SetInitialize","InitializeThunk","dispatch","promice","Promise","all","then"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,gBAAxB;AAEA,MAAMC,eAAe,GAAG,6BAAxB;AAEA,IAAIC,SAAS,GAAG;AACZC,EAAAA,UAAU,EAAE;AADA,CAAhB;;AAGA,MAAMC,UAAU,GAAG,YAA+B;AAAA,MAA9BC,KAA8B,uEAAtBH,SAAsB;AAAA,MAAXI,MAAW;;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKC,cAAL;AACG,aAAO,EACH,GAAGH,KADA;AAEHF,QAAAA,UAAU,EAAE;AAFT,OAAP;;AAIJ;AACK,aAAOE,KAAP;AAPR;AASH,CAVD;;AAWA,OAAO,MAAMI,aAAa,GAAG,OAAO;AAACF,EAAAA,IAAI,EAAEC;AAAP,CAAP,CAAtB;KAAMC,a;AACb,OAAO,MAAMC,eAAe,GAAE,MAAMC,QAAD,IAAa;AAC5C,MAAIC,OAAO,GAAGD,QAAQ,CAACX,SAAS,EAAV,CAAtB;AAEAa,EAAAA,OAAO,CAACC,GAAR,CAAY,CAACF,OAAD,CAAZ,EAAuBG,IAAvB,CAA4B,MAAI;AAC5BJ,IAAAA,QAAQ,CAACF,aAAa,EAAd,CAAR;AACH,GAFD;AAGH,CANM;AAQP,eAAeL,UAAf","sourcesContent":["import {AuthThunk} from \"./Reducer-Auth\";\r\n\r\nconst SET_INITIALIZEd = 'it-kamasutra/SET_INITIALIZE'\r\n\r\nlet initstate = {\r\n    initialize: false\r\n}\r\nconst reducerApp = (state = initstate, action) => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZE:\r\n           return {\r\n               ...state,\r\n               initialize: true\r\n           }\r\n       default:\r\n            return state\r\n    }\r\n}\r\nexport const SetInitialize = () => ({type: SET_INITIALIZE})\r\nexport const InitializeThunk =()=> (dispatch)=> {\r\n    let promice = dispatch(AuthThunk())\r\n\r\n    Promise.all([promice]).then(()=>{\r\n        dispatch(SetInitialize())\r\n    })\r\n}\r\n\r\nexport default reducerApp"]},"metadata":{},"sourceType":"module"}