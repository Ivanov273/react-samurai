{"ast":null,"code":"import { LoginAPI, usersAPI as loginAPI, usersAPI } from \"../api/api\";\nconst SETAUTH = 'SETAUTH';\nconst SETLOGIN = 'SETLOGIN';\nlet initstate = {\n  userid: '',\n  login: '',\n  email: '',\n  isAuth: false,\n  login2: 'adasdasd',\n  password: null,\n  rememberMe: false\n};\n\nconst reducerAuth = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initstate;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SETAUTH:\n      return { ...state,\n        ...action.data,\n        isAuth: true\n      };\n\n    case SETLOGIN:\n      return { ...state,\n        login2: action.login,\n        password: action.password,\n        rememberMe: action.rememberMe\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const SetAuth = (id, login, email) => ({\n  type: SETAUTH,\n  data: {\n    id,\n    login,\n    email\n  }\n});\n_c = SetAuth;\nexport const setLogin = (login, password, rememberMe) => ({\n  type: SETLOGIN,\n  login,\n  password,\n  rememberMe\n});\nexport const AuthThunk = dispatch => {\n  return dispatch => {\n    usersAPI.apiAuth().then(response => {\n      if (response.data.resultCode === 0) {\n        let {\n          id,\n          login,\n          email\n        } = response.data.data;\n        dispatch(SetAuth(id, login, email));\n      }\n    });\n  };\n};\n_c2 = AuthThunk;\nexport const LoginThunk = (login, password, rememberMe) => {\n  return dispatch => {\n    LoginAPI.authorize(login, password, rememberMe).then(response => {\n      if (response.data.resultCode === 0) {\n        //let {id,login,email} = response.data.data\n        console.log('assssassssss');\n        dispatch(setLogin(login, password, rememberMe));\n      }\n    });\n  };\n};\n_c3 = LoginThunk;\nexport default reducerAuth;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SetAuth\");\n$RefreshReg$(_c2, \"AuthThunk\");\n$RefreshReg$(_c3, \"LoginThunk\");","map":{"version":3,"sources":["C:/React/Project/react2.0/src/Readux/Reducer-Auth.js"],"names":["LoginAPI","usersAPI","loginAPI","SETAUTH","SETLOGIN","initstate","userid","login","email","isAuth","login2","password","rememberMe","reducerAuth","state","action","type","data","SetAuth","id","setLogin","AuthThunk","dispatch","apiAuth","then","response","resultCode","LoginThunk","authorize","console","log"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,QAAQ,IAAIC,QAA9B,EAAwCD,QAAxC,QAAuD,YAAvD;AAEA,MAAME,OAAO,GAAG,SAAhB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AAEA,IAAIC,SAAS,GAAG;AACZC,EAAAA,MAAM,EAAE,EADI;AAEZC,EAAAA,KAAK,EAAE,EAFK;AAGZC,EAAAA,KAAK,EAAE,EAHK;AAIZC,EAAAA,MAAM,EAAE,KAJI;AAKZC,EAAAA,MAAM,EAAE,UALI;AAMZC,EAAAA,QAAQ,EAAE,IANE;AAOZC,EAAAA,UAAU,EAAE;AAPA,CAAhB;;AASA,MAAMC,WAAW,GAAG,YAA+B;AAAA,MAA9BC,KAA8B,uEAAtBT,SAAsB;AAAA,MAAXU,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKb,OAAL;AACG,aAAO,EACH,GAAGW,KADA;AAEH,WAAGC,MAAM,CAACE,IAFP;AAGHR,QAAAA,MAAM,EAAG;AAHN,OAAP;;AAKA,SAAKL,QAAL;AACA,aAAO,EACH,GAAGU,KADA;AAEHJ,QAAAA,MAAM,EAAEK,MAAM,CAACR,KAFZ;AAGHI,QAAAA,QAAQ,EAAEI,MAAM,CAACJ,QAHd;AAIHC,QAAAA,UAAU,EAAGG,MAAM,CAACH;AAJjB,OAAP;;AAMH;AACI,aAAOE,KAAP;AAfR;AAiBH,CAlBD;;AAmBA,OAAO,MAAMI,OAAO,GAAG,CAACC,EAAD,EAAIZ,KAAJ,EAAUC,KAAV,MAAqB;AAACQ,EAAAA,IAAI,EAAEb,OAAP;AAAec,EAAAA,IAAI,EAAC;AAACE,IAAAA,EAAD;AAAIZ,IAAAA,KAAJ;AAAUC,IAAAA;AAAV;AAApB,CAArB,CAAhB;KAAMU,O;AACb,OAAO,MAAME,QAAQ,GAAG,CAACb,KAAD,EAAOI,QAAP,EAAgBC,UAAhB,MAAgC;AAACI,EAAAA,IAAI,EAAEZ,QAAP;AAAgBG,EAAAA,KAAhB;AAAsBI,EAAAA,QAAtB;AAA+BC,EAAAA;AAA/B,CAAhC,CAAjB;AACP,OAAO,MAAMS,SAAS,GAAIC,QAAD,IAAa;AAClC,SAAQA,QAAD,IAAa;AAChBrB,IAAAA,QAAQ,CAACsB,OAAT,GAAmBC,IAAnB,CAAwBC,QAAQ,IAAI;AAChC,UAAIA,QAAQ,CAACR,IAAT,CAAcS,UAAd,KAA6B,CAAjC,EAAoC;AAChC,YAAI;AAACP,UAAAA,EAAD;AAAIZ,UAAAA,KAAJ;AAAUC,UAAAA;AAAV,YAAmBiB,QAAQ,CAACR,IAAT,CAAcA,IAArC;AACAK,QAAAA,QAAQ,CAACJ,OAAO,CAACC,EAAD,EAAIZ,KAAJ,EAAUC,KAAV,CAAR,CAAR;AACJ;AACP,KALG;AAMP,GAPG;AAQH,CATM;MAAMa,S;AAUb,OAAO,MAAMM,UAAU,GAAG,CAACpB,KAAD,EAAOI,QAAP,EAAgBC,UAAhB,KAA8B;AACpD,SAAQU,QAAD,IAAa;AAChBtB,IAAAA,QAAQ,CAAC4B,SAAT,CAAmBrB,KAAnB,EAAyBI,QAAzB,EAAkCC,UAAlC,EAA8CY,IAA9C,CAAmDC,QAAQ,IAAI;AAC3D,UAAIA,QAAQ,CAACR,IAAT,CAAcS,UAAd,KAA6B,CAAjC,EAAoC;AAChC;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAR,QAAAA,QAAQ,CAACF,QAAQ,CAACb,KAAD,EAAOI,QAAP,EAAgBC,UAAhB,CAAT,CAAR;AACJ;AACP,KANG;AAOP,GARG;AASH,CAVM;MAAMe,U;AAYb,eAAed,WAAf","sourcesContent":["import {LoginAPI, usersAPI as loginAPI, usersAPI} from \"../api/api\";\r\n\r\nconst SETAUTH = 'SETAUTH'\r\nconst SETLOGIN = 'SETLOGIN'\r\n\r\nlet initstate = {\r\n    userid: '',\r\n    login: '',\r\n    email: '',\r\n    isAuth: false,\r\n    login2: 'adasdasd',\r\n    password: null,\r\n    rememberMe: false\r\n}\r\nconst reducerAuth = (state = initstate, action) => {\r\n    switch (action.type) {\r\n        case SETAUTH:\r\n           return {\r\n               ...state,\r\n               ...action.data,\r\n               isAuth : true\r\n           }\r\n           case SETLOGIN:\r\n           return {\r\n               ...state,\r\n               login2: action.login,\r\n               password: action.password,\r\n               rememberMe : action.rememberMe\r\n           }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const SetAuth = (id,login,email) => ({type: SETAUTH,data:{id,login,email}})\r\nexport const setLogin = (login,password,rememberMe) => ({type: SETLOGIN,login,password,rememberMe})\r\nexport const AuthThunk = (dispatch)=> {\r\n    return (dispatch)=> {\r\n        usersAPI.apiAuth().then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                let {id,login,email} = response.data.data\r\n                dispatch(SetAuth(id,login,email))\r\n           }\r\n    })\r\n}\r\n}\r\nexport const LoginThunk = (login,password,rememberMe)=> {\r\n    return (dispatch)=> {\r\n        LoginAPI.authorize(login,password,rememberMe).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                //let {id,login,email} = response.data.data\r\n                console.log('assssassssss')\r\n                dispatch(setLogin(login,password,rememberMe))\r\n           }\r\n    })\r\n}\r\n}\r\n\r\nexport default reducerAuth"]},"metadata":{},"sourceType":"module"}