{"ast":null,"code":"import { AuthApi } from \"../api/api\";\nconst SETAUTH = 'SETAUTH';\nlet initstate = {\n  userid: '',\n  login: '',\n  email: '',\n  isAuth: false\n};\n\nconst reducerAuth = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initstate;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SETAUTH:\n      return { ...state,\n        ...action.data,\n        isAuth: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const SetAuth = (id, login, email) => ({\n  type: SETAUTH,\n  data: {\n    id,\n    login,\n    email\n  }\n});\n_c = SetAuth;\nexport default reducerAuth;\nexport const ThuncCreatorHeader = () => {\n  return dispatch => {\n    AuthApi.me().then(data => {\n      if (data.resultCode === 0) {\n        let {\n          id,\n          login,\n          email\n        } = data.data;\n        this.props.SetAuth(id, login, email);\n      }\n    });\n  };\n};\n_c2 = ThuncCreatorHeader;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SetAuth\");\n$RefreshReg$(_c2, \"ThuncCreatorHeader\");","map":{"version":3,"sources":["C:/React/Project/react2.0/src/Readux/Reducer-Auth.js"],"names":["AuthApi","SETAUTH","initstate","userid","login","email","isAuth","reducerAuth","state","action","type","data","SetAuth","id","ThuncCreatorHeader","dispatch","me","then","resultCode","props"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,YAAtB;AAEA,MAAMC,OAAO,GAAG,SAAhB;AAEA,IAAIC,SAAS,GAAG;AACZC,EAAAA,MAAM,EAAE,EADI;AAEZC,EAAAA,KAAK,EAAE,EAFK;AAGZC,EAAAA,KAAK,EAAE,EAHK;AAIZC,EAAAA,MAAM,EAAE;AAJI,CAAhB;;AAMA,MAAMC,WAAW,GAAG,YAA+B;AAAA,MAA9BC,KAA8B,uEAAtBN,SAAsB;AAAA,MAAXO,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,OAAL;AACG,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE,IAFP;AAGHL,QAAAA,MAAM,EAAG;AAHN,OAAP;;AAKH;AACI,aAAOE,KAAP;AARR;AAUH,CAXD;;AAYA,OAAO,MAAMI,OAAO,GAAG,CAACC,EAAD,EAAIT,KAAJ,EAAUC,KAAV,MAAqB;AAACK,EAAAA,IAAI,EAAET,OAAP;AAAeU,EAAAA,IAAI,EAAC;AAACE,IAAAA,EAAD;AAAIT,IAAAA,KAAJ;AAAUC,IAAAA;AAAV;AAApB,CAArB,CAAhB;KAAMO,O;AACb,eAAeL,WAAf;AAGA,OAAO,MAAMO,kBAAkB,GAAG,MAAI;AAClC,SAAQC,QAAD,IAAY;AACff,IAAAA,OAAO,CAACgB,EAAR,GAAaC,IAAb,CAAkBN,IAAI,IAAI;AACtB,UAAIA,IAAI,CAACO,UAAL,KAAoB,CAAxB,EAA2B;AACvB,YAAI;AAACL,UAAAA,EAAD;AAAIT,UAAAA,KAAJ;AAAUC,UAAAA;AAAV,YAAmBM,IAAI,CAACA,IAA5B;AACA,aAAKQ,KAAL,CAAWP,OAAX,CAAmBC,EAAnB,EAAsBT,KAAtB,EAA4BC,KAA5B;AACH;AACJ,KALD;AAMH,GAPD;AAQH,CATM;MAAMS,kB","sourcesContent":["import {AuthApi} from \"../api/api\";\r\n\r\nconst SETAUTH = 'SETAUTH'\r\n\r\nlet initstate = {\r\n    userid: '',\r\n    login: '',\r\n    email: '',\r\n    isAuth: false\r\n}\r\nconst reducerAuth = (state = initstate, action) => {\r\n    switch (action.type) {\r\n        case SETAUTH:\r\n           return {\r\n               ...state,\r\n               ...action.data,\r\n               isAuth : true\r\n           }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const SetAuth = (id,login,email) => ({type: SETAUTH,data:{id,login,email}})\r\nexport default reducerAuth\r\n\r\n\r\nexport const ThuncCreatorHeader = ()=>{\r\n    return (dispatch)=>{\r\n        AuthApi.me().then(data => {\r\n            if (data.resultCode === 0) {\r\n                let {id,login,email} = data.data\r\n                this.props.SetAuth(id,login,email)\r\n            }\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}