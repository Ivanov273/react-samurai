{"ast":null,"code":"import { usersAPI } from \"../api/getUsersApi\";\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SETUSERS = 'SETUSERS';\nconst SETPAGE = 'SETPAGE';\nconst TOGLE = 'TOGLE';\nconst TOGLE_PROGRESS = 'TOGLE_PROGRESS';\nlet initstate = {\n  users: [],\n  TotalCount: 50,\n  PageSize: 10,\n  currentPage: 1,\n  isfetching: true,\n  isfetchingprogress: []\n};\n\nconst reducerUsers = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initstate;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userid) {\n            return { ...u,\n              followed: true\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userid) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SETUSERS:\n      return { ...state,\n        users: [...action.users]\n      };\n\n    case SETPAGE:\n      return { ...state,\n        currentPage: action.page\n      };\n\n    case TOGLE:\n      return { ...state,\n        isfetching: action.fetching\n      };\n\n    case TOGLE_PROGRESS:\n      return { ...state,\n        isfetchingprogress: action.isfetching ? [...state.isfetchingprogress, action.id] : state.isfetchingprogress.filter(id => id != action.id)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const OnFollow = userid => ({\n  type: FOLLOW,\n  userid\n});\n_c = OnFollow;\nexport const UnFollow = userid => ({\n  type: UNFOLLOW,\n  userid\n});\n_c2 = UnFollow;\nexport const SetUsers = users => ({\n  type: SETUSERS,\n  users\n});\n_c3 = SetUsers;\nexport const SetPage = page => ({\n  type: SETPAGE,\n  page\n});\n_c4 = SetPage;\nexport const Togle = fetching => ({\n  type: TOGLE,\n  fetching\n});\n_c5 = Togle;\nexport const TogleProgressFetching = (isfetching, id) => ({\n  type: TOGLE_PROGRESS,\n  isfetching,\n  id\n});\n_c6 = TogleProgressFetching;\nexport const getUsersThunkCreator = (currentPage, pagesize) => {\n  return dispatch => {\n    dispatch.Togle(true);\n    usersAPI.getUsersApi(currentPage, pagesize).then(data => {\n      dispatch.SetUsers(data.items);\n      dispatch.Togle(false);\n    });\n  };\n};\nexport default reducerUsers;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"OnFollow\");\n$RefreshReg$(_c2, \"UnFollow\");\n$RefreshReg$(_c3, \"SetUsers\");\n$RefreshReg$(_c4, \"SetPage\");\n$RefreshReg$(_c5, \"Togle\");\n$RefreshReg$(_c6, \"TogleProgressFetching\");","map":{"version":3,"sources":["C:/React/Project/react2.0/src/Readux/Reducer-Users.js"],"names":["usersAPI","FOLLOW","UNFOLLOW","SETUSERS","SETPAGE","TOGLE","TOGLE_PROGRESS","initstate","users","TotalCount","PageSize","currentPage","isfetching","isfetchingprogress","reducerUsers","state","action","type","map","u","id","userid","followed","page","fetching","filter","OnFollow","UnFollow","SetUsers","SetPage","Togle","TogleProgressFetching","getUsersThunkCreator","pagesize","dispatch","getUsersApi","then","data","items"],"mappings":"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","sourcesContent":["import {usersAPI} from \"../api/getUsersApi\";\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SETUSERS = 'SETUSERS'\r\nconst SETPAGE = 'SETPAGE'\r\nconst TOGLE = 'TOGLE'\r\nconst TOGLE_PROGRESS = 'TOGLE_PROGRESS'\r\n\r\nlet initstate = {\r\n    users: [],\r\n    TotalCount: 50,\r\n    PageSize: 10,\r\n    currentPage: 1,\r\n    isfetching: true,\r\n    isfetchingprogress: []\r\n}\r\n\r\nconst reducerUsers = (state = initstate, action) => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW :\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userid) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW :\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userid) {\r\n\r\n                        return {...u, followed: false}\r\n\r\n                    }\r\n                    return u\r\n\r\n                })\r\n\r\n            }\r\n        case SETUSERS:\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        case SETPAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.page\r\n            }\r\n        case TOGLE:\r\n            return {\r\n                ...state,\r\n                isfetching: action.fetching\r\n            }\r\n            case TOGLE_PROGRESS:\r\n            return {\r\n                ...state,\r\n                isfetchingprogress: action.isfetching ?\r\n                    [...state.isfetchingprogress,action.id]\r\n                    : state.isfetchingprogress.filter(id => id!=action.id)\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const OnFollow = (userid) => ({type: FOLLOW, userid})\r\nexport const UnFollow = (userid) => ({type: UNFOLLOW, userid})\r\nexport const SetUsers = (users) => ({type: SETUSERS, users})\r\nexport const SetPage = (page) => ({type: SETPAGE, page})\r\nexport const Togle = (fetching) => ({type: TOGLE, fetching})\r\nexport const TogleProgressFetching = (isfetching,id) => ({type: TOGLE_PROGRESS, isfetching,id})\r\n\r\nexport const getUsersThunkCreator = (currentPage,pagesize)=>{\r\n    return (dispatch) =>{\r\n        dispatch.Togle(true)\r\n        usersAPI.getUsersApi(currentPage,pagesize).then(data => {\r\n\r\n            dispatch.SetUsers(data.items)\r\n            dispatch.Togle(false)\r\n        })\r\n    }\r\n}\r\nexport default reducerUsers"]},"metadata":{},"sourceType":"module"}