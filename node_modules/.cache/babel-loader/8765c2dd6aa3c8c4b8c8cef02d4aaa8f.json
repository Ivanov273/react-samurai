{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\Project\\\\react2.0\\\\src\\\\HOC\\\\hocContainer.js\";\nimport React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet mapStateToProps = state => {\n  return {\n    isAuth: state.Auth.isAuth\n  };\n};\n\nlet hocRedirect = Component => {\n  let RedirectContainer = props => {\n    if (!props.isAuth) return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: '/login'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 36\n    }, this);\n    return /*#__PURE__*/_jsxDEV(Component, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 16\n    }, this);\n  };\n\n  return RedirectContainer;\n};\n\nlet hocRedirectConnect = connect(mapStateToProps)(hocRedirect);\nexport default hocRedirectConnect;","map":{"version":3,"sources":["C:/React/Project/react2.0/src/HOC/hocContainer.js"],"names":["React","Navigate","connect","mapStateToProps","state","isAuth","Auth","hocRedirect","Component","RedirectContainer","props","hocRedirectConnect"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;;AACA,IAAIC,eAAe,GAAEC,KAAD,IAAS;AACzB,SAAM;AACFC,IAAAA,MAAM,EAAED,KAAK,CAACE,IAAN,CAAWD;AADjB,GAAN;AAGH,CAJD;;AAMA,IAAIE,WAAW,GAAEC,SAAD,IAAa;AACzB,MAAIC,iBAAiB,GAAIC,KAAD,IAAS;AAC5B,QAAI,CAACA,KAAK,CAACL,MAAX,EAAmB,oBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAd;AAAA;AAAA;AAAA;AAAA,YAAP;AACpB,wBAAO,QAAC,SAAD,OAAeK;AAAf;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAHD;;AAIA,SAAOD,iBAAP;AACH,CAND;;AAOA,IAAIE,kBAAkB,GAAGT,OAAO,CAACC,eAAD,CAAP,CAAyBI,WAAzB,CAAzB;AACA,eAAeI,kBAAf","sourcesContent":["import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nlet mapStateToProps=(state)=>{\r\n    return{\r\n        isAuth: state.Auth.isAuth\r\n    }\r\n}\r\n\r\nlet hocRedirect=(Component)=>{\r\n    let RedirectContainer = (props)=>{\r\n         if (!props.isAuth) return <Navigate to={'/login'}/>\r\n        return <Component {...props} />\r\n    }\r\n    return RedirectContainer\r\n}\r\nlet hocRedirectConnect = connect(mapStateToProps)(hocRedirect)\r\nexport default hocRedirectConnect\r\n\r\n"]},"metadata":{},"sourceType":"module"}