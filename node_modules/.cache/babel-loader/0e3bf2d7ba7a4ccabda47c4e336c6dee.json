{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\Project\\\\react2.0\\\\src\\\\Component\\\\Common\\\\Paginators.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport s from \"./Paginator.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet Paginator = props => {\n  _s();\n\n  let page = [];\n  let colPages = Math.ceil(props.TotalCount / props.pagesize);\n\n  for (let i = 1; i <= colPages; i++) {\n    page.push(i);\n  }\n\n  let portionCount = Math.ceil(colPages / props.portionsize);\n  let [portionNumber, SetportionNumber] = useState(1);\n  let leftPortionNumber = (portionNumber - 1) * props.portionsize + 1;\n  let rightPortionNumber = portionNumber * props.portionsize; //console.log(props.currentPage)\n  //console.log(portionNumber)\n  //console.log(colPages)\n  //console.log(props.TotalCount)\n  //console.log(props.pagesize)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [portionNumber > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        SetportionNumber(portionNumber - 1);\n      },\n      children: \" Prev\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), page.filter(p => p >= leftPortionNumber && p <= rightPortionNumber).map(p => {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: props.currentPage === p && s.active,\n        onClick: () => props.SetUserPage(p),\n        children: p\n      }, p, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 24\n      }, this);\n    }), portionCount > portionNumber && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        SetportionNumber(portionNumber + 1);\n      },\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Paginator, \"95gWj8NIORf9WbSvppj+fNLNMhc=\");\n\n_c = Paginator;\nexport default Paginator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Paginator\");","map":{"version":3,"sources":["C:/React/Project/react2.0/src/Component/Common/Paginators.jsx"],"names":["React","useState","s","Paginator","props","page","colPages","Math","ceil","TotalCount","pagesize","i","push","portionCount","portionsize","portionNumber","SetportionNumber","leftPortionNumber","rightPortionNumber","filter","p","map","currentPage","active","SetUserPage"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,CAAP,MAAc,wBAAd;;;AAEA,IAAIC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AACvB,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,QAAQ,GAAGC,IAAI,CAACC,IAAL,CAAUJ,KAAK,CAACK,UAAN,GAAmBL,KAAK,CAACM,QAAnC,CAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIL,QAArB,EAA+BK,CAAC,EAAhC,EAAoC;AAChCN,IAAAA,IAAI,CAACO,IAAL,CAAUD,CAAV;AACH;;AACD,MAAIE,YAAY,GAAGN,IAAI,CAACC,IAAL,CAAUF,QAAQ,GAACF,KAAK,CAACU,WAAzB,CAAnB;AACA,MAAI,CAACC,aAAD,EAAeC,gBAAf,IAAkCf,QAAQ,CAAC,CAAD,CAA9C;AACA,MAAIgB,iBAAiB,GAAG,CAACF,aAAa,GAAC,CAAf,IAAkBX,KAAK,CAACU,WAAxB,GAAsC,CAA9D;AACA,MAAII,kBAAkB,GAAGH,aAAa,GAACX,KAAK,CAACU,WAA7C,CATuB,CAUvB;AACA;AACA;AACA;AACA;;AACA,sBAAO;AAAA,eACDC,aAAa,GAAC,CAAd,iBACE;AAAQ,MAAA,OAAO,EAAE,MAAI;AAACC,QAAAA,gBAAgB,CAACD,aAAa,GAAC,CAAf,CAAhB;AAAkC,OAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFD,EAIEV,IAAI,CACAc,MADJ,CACWC,CAAC,IAAEA,CAAC,IAAEH,iBAAH,IAAwBG,CAAC,IAAEF,kBADzC,EAEIG,GAFJ,CAEQD,CAAC,IAAG;AACT,0BAAO;AAAM,QAAA,SAAS,EAAIhB,KAAK,CAACkB,WAAN,KAAsBF,CAAtB,IAA2BlB,CAAC,CAACqB,MAAhD;AAEM,QAAA,OAAO,EAAE,MAAMnB,KAAK,CAACoB,WAAN,CAAkBJ,CAAlB,CAFrB;AAAA,kBAE4CA;AAF5C,SACWA,CADX;AAAA;AAAA;AAAA;AAAA,cAAP;AAGH,KANA,CAJF,EAWFP,YAAY,GAAGE,aAAf,iBACG;AAAQ,MAAA,OAAO,EAAE,MAAI;AAACC,QAAAA,gBAAgB,CAACD,aAAa,GAAC,CAAf,CAAhB;AAAkC,OAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZD;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAeH,CA9BD;;GAAIZ,S;;KAAAA,S;AA+BJ,eAAeA,SAAf","sourcesContent":["import React, {useState} from 'react'\r\nimport s from \"./Paginator.module.css\";\r\n\r\nlet Paginator = (props) => {\r\n    let page = []\r\n    let colPages = Math.ceil(props.TotalCount / props.pagesize)\r\n    for (let i = 1; i <= colPages; i++) {\r\n        page.push(i)\r\n    }\r\n    let portionCount = Math.ceil(colPages/props.portionsize)\r\n    let [portionNumber,SetportionNumber]= useState(1)\r\n    let leftPortionNumber = (portionNumber-1)*props.portionsize + 1\r\n    let rightPortionNumber = portionNumber*props.portionsize\r\n    //console.log(props.currentPage)\r\n    //console.log(portionNumber)\r\n    //console.log(colPages)\r\n    //console.log(props.TotalCount)\r\n    //console.log(props.pagesize)\r\n    return <div>\r\n        { portionNumber>1 &&\r\n            <button onClick={()=>{SetportionNumber(portionNumber-1)}}> Prev</button>\r\n        }\r\n            {page\r\n                .filter(p=>p>=leftPortionNumber && p<=rightPortionNumber)\r\n                .map(p =>{\r\n                return <span className={  props.currentPage === p && s.active} \r\n                             key={p}\r\n                             onClick={() => props.SetUserPage(p)}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber &&\r\n            <button onClick={()=>{SetportionNumber(portionNumber+1)}}>Next</button>\r\n        }\r\n    </div>\r\n}\r\nexport default Paginator"]},"metadata":{},"sourceType":"module"}