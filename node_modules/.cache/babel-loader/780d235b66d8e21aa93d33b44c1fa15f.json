{"ast":null,"code":"import { usersAPI } from \"../api/api\";\nimport actions from \"redux-form/lib/actions\";\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SETUSERS = 'SETUSERS';\nconst SETPAGE = 'SETPAGE';\nconst TOGLE = 'TOGLE';\nconst TOGLE_PROGRESS = 'TOGLE_PROGRESS';\nlet initstate = {\n  users: [],\n  TotalCount: 50,\n  pagesize: 10,\n  portionsize: 10,\n  currentPage: 1,\n  isfetching: true,\n  isfetchingprogress: [],\n  fake: 10\n};\n\nconst reducerUsers = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initstate;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userid) {\n            return { ...u,\n              followed: true\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userid) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SETUSERS:\n      return { ...state,\n        users: [...action.users],\n        TotalCount: action.totalCount\n      };\n\n    case SETPAGE:\n      return { ...state,\n        currentPage: action.page\n      };\n\n    case TOGLE:\n      return { ...state,\n        isfetching: action.fetching\n      };\n\n    case TOGLE_PROGRESS:\n      return { ...state,\n        isfetchingprogress: action.isfetching ? [...state.isfetchingprogress, action.id] : state.isfetchingprogress.filter(id => id != action.id)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const OnFollow = userid => ({\n  type: FOLLOW,\n  userid\n});\n_c = OnFollow;\nexport const UnFollow = userid => ({\n  type: UNFOLLOW,\n  userid\n});\n_c2 = UnFollow;\nexport const SetUsers = (users, totalCount) => ({\n  type: SETUSERS,\n  users,\n  totalCount\n});\n_c3 = SetUsers;\nexport const SetPage = page => ({\n  type: SETPAGE,\n  page\n});\n_c4 = SetPage;\nexport const Togle = fetching => ({\n  type: TOGLE,\n  fetching\n});\n_c5 = Togle;\nexport const TogleProgressFetching = (isfetching, id) => ({\n  type: TOGLE_PROGRESS,\n  isfetching,\n  id\n});\n_c6 = TogleProgressFetching;\nexport const getUsersThunkCreator = (currentPage, pagesize) => {\n  return dispatch => {\n    dispatch(Togle(true));\n    usersAPI.getUsersApi(currentPage, pagesize).then(data => {\n      dispatch(SetUsers(data.items, data.totalCount));\n      dispatch(SetPage(currentPage));\n      dispatch(Togle(false));\n    });\n  };\n};\n\nconst FollowUnfollowFlow = async (id, dispatch, ApiMethod, actionCreator) => {\n  dispatch(TogleProgressFetching(true, id));\n  let response = await ApiMethod;\n\n  if (response.data.resultCode == 0) {\n    dispatch(actionCreator(id));\n  }\n\n  dispatch(TogleProgressFetching(false, id));\n};\n\n_c7 = FollowUnfollowFlow;\nexport const followUsersThunkCreator = id => {\n  return async dispatch => {\n    let ApiMethod = usersAPI.getunFollowUsersApi(id);\n    FollowUnfollowFlow(id, dispatch, ApiMethod, UnFollow);\n  };\n};\nexport const unfollowUsersThunkCreator = id => {\n  return async dispatch => {\n    let ApiMethod = usersAPI.getFollowUsersApi(id);\n    FollowUnfollowFlow(id, dispatch, ApiMethod, OnFollow);\n  };\n};\nexport default reducerUsers;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"OnFollow\");\n$RefreshReg$(_c2, \"UnFollow\");\n$RefreshReg$(_c3, \"SetUsers\");\n$RefreshReg$(_c4, \"SetPage\");\n$RefreshReg$(_c5, \"Togle\");\n$RefreshReg$(_c6, \"TogleProgressFetching\");\n$RefreshReg$(_c7, \"FollowUnfollowFlow\");","map":{"version":3,"sources":["C:/React/Project/react2.0/src/Redux/Reducer-Users.js"],"names":["usersAPI","actions","FOLLOW","UNFOLLOW","SETUSERS","SETPAGE","TOGLE","TOGLE_PROGRESS","initstate","users","TotalCount","pagesize","portionsize","currentPage","isfetching","isfetchingprogress","fake","reducerUsers","state","action","type","map","u","id","userid","followed","totalCount","page","fetching","filter","OnFollow","UnFollow","SetUsers","SetPage","Togle","TogleProgressFetching","getUsersThunkCreator","dispatch","getUsersApi","then","data","items","FollowUnfollowFlow","ApiMethod","actionCreator","response","resultCode","followUsersThunkCreator","getunFollowUsersApi","unfollowUsersThunkCreator","getFollowUsersApi"],"mappings":"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","sourcesContent":["import {usersAPI} from \"../api/api\";\r\nimport actions from \"redux-form/lib/actions\";\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SETUSERS = 'SETUSERS'\r\nconst SETPAGE = 'SETPAGE'\r\nconst TOGLE = 'TOGLE'\r\nconst TOGLE_PROGRESS = 'TOGLE_PROGRESS'\r\n\r\nlet initstate = {\r\n    users: [],\r\n    TotalCount: 50,\r\n    pagesize: 10,\r\n    portionsize: 10,\r\n    currentPage: 1,\r\n    isfetching: true,\r\n    isfetchingprogress: [],\r\n    fake: 10\r\n}\r\n\r\nconst reducerUsers = (state = initstate, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW :\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userid) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW :\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userid) {\r\n\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SETUSERS:\r\n            return {\r\n                ...state,\r\n                users: [...action.users],\r\n                TotalCount: action.totalCount\r\n            }\r\n        case SETPAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.page\r\n            }\r\n        case TOGLE:\r\n            return {\r\n                ...state,\r\n                isfetching: action.fetching\r\n            }\r\n        case TOGLE_PROGRESS:\r\n            return {\r\n                ...state,\r\n                isfetchingprogress: action.isfetching ?\r\n                    [...state.isfetchingprogress, action.id]\r\n                    : state.isfetchingprogress.filter(id => id != action.id)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const OnFollow = (userid) => ({type: FOLLOW, userid})\r\nexport const UnFollow = (userid) => ({type: UNFOLLOW, userid})\r\nexport const SetUsers = (users,totalCount) => ({type: SETUSERS, users,totalCount})\r\nexport const SetPage = (page) => ({type: SETPAGE, page})\r\nexport const Togle = (fetching) => ({type: TOGLE, fetching})\r\nexport const TogleProgressFetching = (isfetching, id) => ({type: TOGLE_PROGRESS, isfetching, id})\r\n\r\nexport const getUsersThunkCreator = (currentPage, pagesize) => {\r\n    return (dispatch) => {\r\n        dispatch(Togle(true))\r\n        usersAPI.getUsersApi(currentPage, pagesize).then(data => {\r\n            dispatch(SetUsers(data.items,data.totalCount))\r\n            dispatch(SetPage(currentPage))\r\n            dispatch(Togle(false))\r\n        })\r\n    }\r\n}\r\nconst FollowUnfollowFlow = async (id, dispatch, ApiMethod, actionCreator) => {\r\n    dispatch(TogleProgressFetching(true, id))\r\n    let response = await ApiMethod\r\n    if (response.data.resultCode == 0) {\r\n        dispatch(actionCreator(id))\r\n    }\r\n    dispatch(TogleProgressFetching(false, id))\r\n}\r\nexport const followUsersThunkCreator = (id) => {\r\n    return async (dispatch) => {\r\n        let ApiMethod = usersAPI.getunFollowUsersApi(id)\r\n        FollowUnfollowFlow(id, dispatch, ApiMethod, UnFollow)\r\n    }\r\n}\r\nexport const unfollowUsersThunkCreator = (id) => {\r\n    return async (dispatch) => {\r\n        let ApiMethod = usersAPI.getFollowUsersApi(id)\r\n        FollowUnfollowFlow(id, dispatch, ApiMethod, OnFollow)\r\n    }\r\n}\r\nexport default reducerUsers"]},"metadata":{},"sourceType":"module"}